services:
  mongo:
    image: mongo:7.0.14
    container_name: mongo
    ports:
      - "27017:27017"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - ./docker/mongodb/data:/data/db
    logging:
      options:
        max-size: 1g
    networks:
      - backend
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s
  # The name of our service is "postgres"
  # but you can use the name of your choice.
  # Note: This may change the commands you are going to use a little bit.
  postgres:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:14-alpine'
    container_name: postgres
    restart: always

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - "5432:5432"

    environment:
      POSTGRES_USER: root # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: order-service # The PostgreSQL default database (automatically created at first launch)

    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data/
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --quiet --dbname=$${POSTGRES_DB} --username=$${POSTGRES_USER} || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 3

    networks:
      - backend
  product-service:
    container_name: product-service
    build:
      context: product-service
      dockerfile: Dockerfile
    image: product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8081:8080"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - backend
  order-service:
    container_name: order-service
    build:
      context: order-service
      dockerfile: Dockerfile
    image: order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - backend
  inventory-service:
    container_name: inventory-service
    build:
      context: inventory-service
      dockerfile: Dockerfile
    image: inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - backend
  eureka-server:
    container_name: eureka-server
    build:
      context: eureka-server
      dockerfile: Dockerfile
    image: eureka-server:latest
    ports:
      - "8761:8761"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

    networks:
      - backend

  zipkin:
    image: openzipkin/zipkin
    restart: always
    mem_limit: 1024m
    environment:
      - STORAGE_TYPE=mem
    ports:
      - 9411:9411
    networks:
      - backend

  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    ports:
      - 9092:9092
      - 9094:9094
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_BROKER_ID=0 #1
      - KAFKA_CFG_PROCESS_ROLES=controller, broker #2
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094 #3
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094 #4
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT #5
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093 #6
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER #7
    networks:
      - backend
    volumes:
      - ./docker/kafka/data:/bitnami

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8086:8080
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - backend

  postgres-keycloak:
    # Official Postgres image from DockerHub (we use the last version)
    image: postgres:16-alpine
    container_name: postgres-keycloak
    restart: always
    mem_limit: 512M
    cpus: '0.5'
    ports:
      - "5433:5432"

    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
      POSTGRES_DB: keycloak
    volumes:
      - ./docker/postgres/keycloak-data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --quiet --dbname=$${POSTGRES_DB} --username=$${POSTGRES_USER} || exit 1" ]
      interval: 5s
      timeout: 2s
      retries: 3
    networks:
      - keycloak_network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: [ "start-dev", "--import-realm" ]
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    ports:
      - 8181:8080
      - 9000:9000
    restart: always
    depends_on:
      - postgres-keycloak
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    networks:
      - keycloak_network

networks:
  backend:
    driver: bridge
  keycloak_network:
    driver: bridge
